//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.3.0'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "mcxr-play"
version = "${project.play_version}+${getVersionMetadata()}"
group = project.maven_group

repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation project(":mcxr-core")

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation("com.github.Virtuoel:Pehkui:2.2.1") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation("org.joml:joml:1.10.1")
    include(modImplementation("com.github.Sorenon:fart:cef5164233"))
}

sourceSets {
    main {
        resources {
            srcDir 'loader'
        }
    }
}

processResources {
    inputs.property "play_version", project.play_version
    inputs.property "core_version", project.core_version

    filesMatching("fabric.mod.json") {
        expand "play_version": project.play_version, "core_version": project.core_version
    }

    File openxr_dll = file("loader/openxr_loader.dll")
    if (!openxr_dll.exists()) {
        throw new FileNotFoundException("openxr_loader.dll is missing! place it -> ${openxr_dll.absolutePath}")
    }
}

//downloadAssets {
//    boolean offline = project.getGradle().getStartParameter().isOffline()
//    if (!offline) {
//        File openxr_dll = file("loader/openxr_loader.dll")
//        mkdir(openxr_dll.parent)
//
//        HttpURLConnection connection = new URL("https://www.nuget.org/api/v2/package/OpenXR.Loader/1.0.10.2").openConnection()
//        connection.connect()
//        InputStream inputStream = connection.getInputStream()
//
////        FileUtils.copyInputStreamToFile(inputStream, file("openxr_loader.zip"));
//        try (FileOutputStream outputStream = new FileOutputStream(file("loader/openxr_loader.zip"), false)) {
//            final int DEFAULT_BUFFER_SIZE = 8192;
//            int read;
//            byte[] bytes = new byte[DEFAULT_BUFFER_SIZE];
//            while ((read = inputStream.read(bytes)) != -1) {
//                outputStream.write(bytes, 0, read);
//            }
//        } catch (IOException e) {
//            throw new RuntimeException(e)
//        }
//    }
//}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    from("openxr_loader.dll")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }
}